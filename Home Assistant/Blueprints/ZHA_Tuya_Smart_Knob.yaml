blueprint:
  name: ZHA - Tuya - TS004F Smart Knob
  description: 'This automation adds triggers for all actions of the Tuya TS004F rotating
    knob remote. It can be used in both Command/Dimmer and Event/Scene mode. Both
    modes have their own actions.

    In Command/Dimmer mode the config is mostly internal except for pressing the button.
    In Event/Scene mode you can select your own actions. To switch modes you can press
    the button 3 times fast.

    Sold on AliExpress by brands like Moes, Girier etc.
    
    Original blueprints by JoryHovgeveen,  seamus65 and GonzaloAlbito. Merged by Dreamscent'
  domain: automation
  # The input stuff comes here.
  input:
    mode:
      name: Automation Mode
      description: https://www.home-assistant.io/docs/automation/modes/
      default: restart
      selector:
        select:
          mode: dropdown
          options:
          - single
          - restart
          - queued
          - parallel
          multiple: false
          custom_value: false
    max:
      name: Automation Max Queue
      description: The maximum number of runs that can be executing and/or queued
        up at a time.
      default: 10
      selector:
        number:
          mode: box
          min: 1.0
          max: 100.0
          step: 1.0
    remote:
      name: Tuya - TS004F Rotating Knob
      description: Select the remote control you wish to use.
      selector:
        device:
          integration: zha
          model: TS004F
          multiple: false
    light:
      name: Light (Command/Dimmer mode)
      selector:
        target:
          entity:
          - domain:
            - light
    single_press:
      name: Toggle (Command/Dimmer mode)
      selector:
        action: {}
      default: []
    step_percent:
      name: Light step
      description: Light pecent change for each knob step
      selector:
        number:
          mode: slider
          min: 0.0
          max: 100.0
          unit_of_measurement: '%'
          step: 1.0
      default: 10
    press_light:
      name: Pressed light(s)
      description: The light(s) to control when pressed
      selector:
        target:
          entity:
          - domain:
            - light
    press_step_percent:
      name: Pressed light step
      description: Light pecent change for each knob step while pressed
      selector:
        number:
          mode: slider
          min: 0.0
          max: 100.0
          unit_of_measurement: '%'
          step: 1.0
      default: 10
    press_short:
      name: Short Press (Event/Scene mode)
      selector:
        action: {}
      default: []
    press_double:
      name: Double Press (Event/Scene mode)
      selector:
        action: {}
      default: []
    press_long:
      name: Long Press (Event/Scene mode)
      selector:
        action: {}
      default: []
    rotate_left:
      name: Rotate Left (Event/Scene mode)
      selector:
        action: {}
      default: []
    rotate_right:
      name: Rotate Right (Event/Scene mode)
      selector:
        action: {}
      default: []
  source_url: https://github.com/dreamscent

# How it handles the TuYa data comes here
mode: !input mode
max: !input max
max_exceeded: silent
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input remote
action:
# first create variables from the triggering action and automation user inputs for use later
- variables:
    light: !input light
    command: '{{ trigger.event.data.command }}'
    cluster_id: '{{ trigger.event.data.cluster_id }}'
    endpoint_id: '{{ trigger.event.data.endpoint_id }}'
    args: '{{ trigger.event.data.args }}'
    # sets direction to 0,1,2 based on what args[0] is
    direction: '{% if trigger.event.data.args[0] == 0 %} 0 {% elif trigger.event.data.args[0]
      == 1 %} 1 {% elif trigger.event.data.args[0] == 3 %} 3 {% endif %}'
    value: '{% if trigger.event.data.args[1] %} {{ trigger.event.data.args[1] / 2
      }} {% endif %}'
    speed: '{% if trigger.event.data.args[2] == 1 %} 0.5 {% else %} 0 {% endif %}'
    # added on
    mode: '{% if command != ''toggle'' %} {{ trigger.event.data.args[0] }} {% endif
      %}'
    steps: '{% if command != ''toggle'' %} {{ (trigger.event.data.args[1] / 12.5 )
      | int }} {% endif %}'
    step_percent: !input step_percent
    press_step_percent: !input press_step_percent
- choose:
  # do stuff based on the variables above
  - conditions:
    - '{{ command == ''toggle'' }}'
    - '{{ cluster_id == 6 }}'
    - '{{ endpoint_id == 1 }}'
    sequence: !input single_press
  # COMMAND MODE
  # For rotations. Direction 0 and 1 are left and right(or vice versa, but should not matter sincce most people set them both the same)
  - conditions:
    - '{{ command == ''step'' }}'
    - '{{ cluster_id == 8 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ direction == 0 }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 2 }}'
        sequence:
        - service_template: light.turn_on
          target: !input light
          data_template:
            brightness_step_pct: '{{ value }}'
            transition: '{{ speed }}'
  - conditions:
    - '{{ command == ''step'' }}'
    - '{{ cluster_id == 8 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ direction == 1 }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 2 }}'
        sequence:
        - service_template: light.turn_on
          target: !input light
          data_template:
            brightness_step_pct: '{{ - value }}'
            transition: '{{ speed }}'
  # step_color_temp = press and rotate [to confirm]
  - conditions:
    - '{{ command == ''step_color_temp'' }}'
    - '{{ cluster_id == 768 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ direction == 1 }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 2 }}'
        sequence:
        - service_template: light.turn_on
          target: !input press_light
          data_template:
            color_temp: '{{ ( state_attr( light.entity_id, ''color_temp'' ) or 300
              ) + value }}'
            transition: '{{ speed }}'
  - conditions:
    - '{{ command == ''step_color_temp'' }}'
    - '{{ cluster_id == 768 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ direction == 3 }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 2 }}'
        sequence:
        - service_template: light.turn_on
          target: !input press_light
          data_template:
            color_temp: '{{ ( state_attr( light.entity_id, ''color_temp'' ) or 300
              ) - value }}'
            transition: '{{ speed }}'
  - conditions:
    - '{{ command == ''move_hue'' }}'
    - '{{ cluster_id == 768 }}'
    - '{{ endpoint_id == 1 }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 24 }}'
        sequence:
        - service_template: light.turn_on
          target: !input light
          data_template:
            hs_color:
            - '{{ ( value + (state_attr( light.entity_id , ''hs_color'' )[0] or 0))
              % 360 }}'
            - 100
            transition: 0.5
        - delay:
            hours: 0
            minutes: 0
            seconds: 1
            milliseconds: 0
  - conditions:
    - '{{ command == ''stop_move_step'' }}'
    - '{{ cluster_id == 768 }}'
    - '{{ endpoint_id == 1 }}'
    sequence:
  - conditions:
    - '{{ command == ''remote_button_short_press'' }}'
    sequence: !input press_short
  - conditions:
    - '{{ command == ''remote_button_double_press'' }}'
    sequence: !input press_double
  - conditions:
    - '{{ command == ''remote_button_long_press'' }}'
    sequence: !input press_long
  - conditions:
    - '{{ command == ''left'' }}'
    sequence: !input rotate_left
  - conditions:
    - '{{ command == ''right'' }}'
    sequence: !input rotate_right
