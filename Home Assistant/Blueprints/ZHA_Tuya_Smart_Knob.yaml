blueprint:
  name: ZHA - Moes Smart Knob for lights
  description: 'Control lights with a Moes Smart Knob.
  
    The knob functions in 2 modes: Command and Event/Scene. To switch between them, triple click the center button
    
    Command mode:
    1. Single Press
    2. Rotate Left/Right to dim
    3. Rotate Left/Right while pressing the center button to dim a different light(if prefered)

    Event/Scene mode:
    1. Single Press
    2. Double Press
    3. Long Press (Hold for about 4 seconds then release)

    Original blueprint by seamus65 (https://gist.github.com/seamus65/939a147634942dd885c8704334627f93).

    Improved by GonzaloAlbito (https://gist.github.com/gonzaloalbito/3dc06702e941e08298ea9bfade731731).

    Merged by Dreamscent(0x4a)

    Version 2022-05-29.'
  domain: automation
  input:
    remote:
      name: Remote
      description: Moes Knob to use
      selector:
        device:
          integration: zha
          manufacturer: _TZ3000_qja6nq5z
          model: TS004F
          multiple: false
    light:
      name: Light(s)
      description: The light(s) to control
      selector:
        target:
          entity:
          - domain:
            - light
    step_percent:
      name: Light step
      description: Light pecent change for each knob step
      selector:
        number:
          mode: slider
          min: 0.0
          max: 100.0
          unit_of_measurement: '%'
          step: 1.0
      default: 10
    press_light:
      name: Pressed light(s)
      description: The light(s) to control when pressed
      selector:
        target:
          entity:
          - domain:
            - light
    press_step_percent:
      name: Pressed light step
      description: Light pecent change for each knob step when pressed
      selector:
        number:
          mode: slider
          min: 0.0
          max: 100.0
          unit_of_measurement: '%'
          step: 1.0
      default: 10
    single_press:
      name: Single press
      description: Action to run on single press
      default: []
      selector:
        action: {}
    # event mode starts here
    press_short:
      name: Short Press (Event/Scene mode)
      selector:
        action: {}
      default: []
    press_double:
      name: Double Press (Event/Scene mode)
      selector:
        action: {}
      default: []
    press_long:
      name: Long Press (Event/Scene mode)
      selector:
        action: {}
      default: []
    rotate_left:
      name: Rotate Left (Event/Scene mode)
      selector:
        action: {}
      default: []
    rotate_right:
      name: Rotate Right (Event/Scene mode)
      selector:
        action: {}
      default: []
  source_url: https://gist.github.com/gonzaloalbito/3dc06702e941e08298ea9bfade731731
mode: restart
max_exceeded: silent
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input remote
action:
- variables:
    # same for both
    command: '{{ trigger.event.data.command }}'
    cluster_id: '{{ trigger.event.data.cluster_id }}'
    endpoint_id: '{{ trigger.event.data.endpoint_id }}'
    mode: '{% if command != ''toggle'' %} {{ trigger.event.data.args[0] }} {% endif
      %}'
    # edit: added a second if to avoid error because event mode doesn't have args[1]
    steps: '{% if command != ''toggle'' %} { { %if trigger.event.data.args[1] %} { { (trigger.event.data.args[1] / 12.5 )
      | int }}}{% endif %}'
    step_percent: !input step_percent
    press_step_percent: !input press_step_percent
    # jory stuff
    args: '{{ trigger.event.data.args }}'
    direction: '{% if trigger.event.data.args[0] == 0 %} 0 {% elif trigger.event.data.args[0]
      == 1 %} 1 {% elif trigger.event.data.args[0] == 3 %} 3 {% endif %}'
    value: '{% if trigger.event.data.args[1] %} {{ trigger.event.data.args[1] / 2
      }} {% endif %}'
    speed: '{% if trigger.event.data.args[2] == 1 %} 0.5 {% else %} 0 {% endif %}'

- choose:
  - conditions:
    - '{{ cluster_id == 6 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ command == ''toggle'' }}'
    sequence: !input single_press
  - conditions:
    - '{{ cluster_id == 8 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ command == ''step'' }}'
    - '{{ mode == ''StepMode.Up'' }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 2 }}'
        sequence:
        - service_template: light.turn_on
          target: !input light
          data_template:
            brightness_step_pct: '{{ step_percent * steps }}'
            transition: 0.5
  - conditions:
    - '{{ cluster_id == 8 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ command == ''step'' }}'
    - '{{ mode == ''StepMode.Down'' }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 2 }}'
        sequence:
        - service_template: light.turn_on
          target: !input light
          data_template:
            brightness_step_pct: -{{ step_percent * steps }}
            transition: 0.5
  - conditions:
    - '{{ cluster_id == 768 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ command == ''step_color_temp'' }}'
    - '{{ mode == ''StepMode.Up'' }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 2 }}'
        sequence:
        - service_template: light.turn_on
          target: !input press_light
          data_template:
            brightness_step_pct: '{{ press_step_percent * steps }}'
            transition: 0.5
  - conditions:
    - '{{ cluster_id == 768 }}'
    - '{{ endpoint_id == 1 }}'
    - '{{ command == ''step_color_temp'' }}'
    - '{{ mode == ''StepMode.Down'' }}'
    sequence:
    - repeat:
        while:
        - condition: template
          value_template: '{{ repeat.index < 2 }}'
        sequence:
        - service_template: light.turn_on
          target: !input press_light
          data_template:
            brightness_step_pct: -{{ press_step_percent * steps }}
            transition: 0.5

# event mode
  - conditions:
    - '{{ command == ''remote_button_short_press'' }}'
    sequence: !input press_short
  - conditions:
    - '{{ command == ''remote_button_double_press'' }}'
    sequence: !input press_double
  - conditions:
    - '{{ command == ''remote_button_long_press'' }}'
    sequence: !input press_long
    # not working, WIP
  - conditions:
    - '{{ command == ''left'' }}'
    sequence: !input rotate_left
  - conditions:
    - '{{ command == ''right'' }}'
    sequence: !input rotate_right
