blueprint:
  name: ZHA - Moes Smart Knob for lights
  description: |
    Control lights with a Moes Smart Knob. You can set functions for a single press.
    Rotating left/right will change the brightness smoothly of the selected light.
    Not all functionality of the device is available at time of writing, e.g., double press,
    long press, and press and rotate.

    Original blueprint by seamus65 (https://gist.github.com/seamus65/939a147634942dd885c8704334627f93).
    Improved by GonzaloAlbito (https://gist.github.com/gonzaloalbito/3dc06702e941e08298ea9bfade731731).
    Updated for new ZHA event structure.

    Version 2023-10-10.
  domain: automation
  input:
    remote:
      name: Remote
      description: Moes Knob to use
      selector:
        device:
          integration: zha
          manufacturer: _TZ3000_qja6nq5z
          model: TS004F
          multiple: false
    light:
      name: Light(s)
      description: The light(s) to control
      selector:
        target:
          entity:
            - domain: light
    step_percent:
      name: Light step
      description: Light percent change for each knob step
      selector:
        number:
          mode: slider
          min: 0.0
          max: 100.0
          unit_of_measurement: '%'
          step: 1.0
      default: 20
    press_light:
      name: Pressed light(s)
      description: The light(s) to control when pressed
      selector:
        target:
          entity:
            - domain: light
    press_step_percent:
      name: Pressed light step
      description: Light percent change for each knob step when pressed
      selector:
        number:
          mode: slider
          min: 0.0
          max: 100.0
          unit_of_measurement: '%'
          step: 1.0
      default: 5
    single_press:
      name: Single press
      description: Action to run on single press
      default: []
      selector:
        action: {}
  source_url: https://github.com/Dreamscent/HomeIsWhereTheSmartIs/blob/main/Home%20Assistant/Blueprints/ZHA_Tuya_Smart_Knob%20-%20Command.yaml
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input remote
action:
  - variables:
      command: '{{ trigger.event.data.command }}'
      cluster_id: '{{ trigger.event.data.cluster_id }}'
      endpoint_id: '{{ trigger.event.data.endpoint_id }}'
      mode: '{{ trigger.event.data.params.step_mode }}'  # Use params.step_mode
      step_size: '{{ trigger.event.data.params.step_size }}'  # Use params.step_size
      steps: '{{ (step_size / 12.5) | int }}'  # Adjust scaling if needed
      step_percent: !input step_percent
      press_step_percent: !input press_step_percent
  - service: system_log.write  # Debug step
    data:
      message: >
        Command: {{ command }}, Cluster ID: {{ cluster_id }}, Endpoint ID: {{ endpoint_id }},
        Mode: {{ mode }}, Step Size: {{ step_size }}, Steps: {{ steps }}
      level: info
  - choose:
      - conditions:
          - '{{ cluster_id == 6 }}'
          - '{{ endpoint_id == 1 }}'
          - '{{ command == ''toggle'' }}'
        sequence: !input single_press
      - conditions:
          - '{{ cluster_id == 8 }}'
          - '{{ endpoint_id == 1 }}'
          - '{{ command == ''step'' }}'
          - '{{ mode == 0 }}'  # StepMode.Up (0)
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: '{{ repeat.index < 2 }}'
              sequence:
                - service: light.turn_on
                  target: !input light
                  data:
                    brightness_step_pct: '{{ step_percent * steps }}'
                    transition: 0.5
      - conditions:
          - '{{ cluster_id == 8 }}'
          - '{{ endpoint_id == 1 }}'
          - '{{ command == ''step'' }}'
          - '{{ mode == 1 }}'  # StepMode.Down (1)
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: '{{ repeat.index < 2 }}'
              sequence:
                - service: light.turn_on
                  target: !input light
                  data:
                    brightness_step_pct: '-{{ step_percent * steps }}'
                    transition: 0.5
      - conditions:
          - '{{ cluster_id == 768 }}'
          - '{{ endpoint_id == 1 }}'
          - '{{ command == ''step_color_temp'' }}'
          - '{{ mode == 0 }}'  # StepMode.Up (0)
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: '{{ repeat.index < 2 }}'
              sequence:
                - service: light.turn_on
                  target: !input press_light
                  data:
                    brightness_step_pct: '{{ press_step_percent * steps }}'
                    transition: 0.5
      - conditions:
          - '{{ cluster_id == 768 }}'
          - '{{ endpoint_id == 1 }}'
          - '{{ command == ''step_color_temp'' }}'
          - '{{ mode == 1 }}'  # StepMode.Down (1)
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: '{{ repeat.index < 2 }}'
              sequence:
                - service: light.turn_on
                  target: !input press_light
                  data:
                    brightness_step_pct: '-{{ press_step_percent * steps }}'
                    transition: 0.5
      - default:
          - service: system_log.write  # Debug step
            data:
              message: >
                Unexpected condition: Command: {{ command }}, Cluster ID: {{ cluster_id }},
                Endpoint ID: {{ endpoint_id }}, Mode: {{ mode }}
              level: warning
